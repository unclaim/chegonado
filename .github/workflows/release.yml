name: Go CI/CD

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  schedule:
    - cron: '15 4 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          
      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6
      
      # Устанавливаем зависимости и компилируем локальные пакеты
      - name: Install dependencies and compile
        run: |
          go mod tidy
          go mod download
          go build ./...

      - name: Run linter
        run: $(go env GOPATH)/bin/golangci-lint run ./...
        
      - name: Run tests
        run: go test -v ./...

      - name: Build project
        run: go build -o server cmd/server/main.go

      - name: Upload server artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-artifact
          path: server

  build-and-push-docker:
    needs: [lint-test-and-build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: [lint-test-and-build, build-and-push-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Archive source code
        run: zip -r source-code.zip . -x ".git/*"

      - name: Download server artifact
        uses: actions/download-artifact@v4
        with:
          name: server-artifact

      - name: Get latest tag and create new version
        id: get_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          MAJOR=$(echo $LATEST_TAG | cut -d'.' -f1 | cut -c2-)
          MINOR=$(echo $LATEST_TAG | cut -d'.' -f2)
          PATCH=$(echo $LATEST_TAG | cut -d'.' -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "Latest tag: $LATEST_TAG"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
      - name: Create new Git tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            source-code.zip
            server
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          body: |
            # Release ${{ env.NEW_VERSION }}
            This is an automated release from GitHub Actions.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
